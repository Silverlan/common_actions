name: 'Get Submodule'
description: 'Downloads and builds a git submodule'
inputs:
  repo:
    description: 'Repository Url'
    required: true
  repo_name:
    description: 'Name of the repository'
    required: true
  repo_branch:
    description: 'Branch to clone'
    required: true
    default: 'master'
  dir:
    description: 'Clone directory'
    required: true
    default: 'external_libs'
  clone_dir:
    description: 'Clone sub-directory'
    required: true
    default: ''
  should_build:
    description: 'Should build?'
    required: true
    default: true
  build_type:
    description: 'Build Type'
    required: true
  build_generator:
    description: 'Build Generator'
    required: true
  include_dir:
    description: 'Name of the include directory'
    required: true
    default: 'include'
  cmake_definitions:
    description: 'CMake definitions'
    required: true
    default: ''
  cmake_var:
    description: 'Name of the CMake variable to set to the include path'
    required: true
    default: ''
  cmake_var_alias:
    description: 'Alias CMake variable name'
    required: true
    default: ''
  checkout_submodules:
    description: 'Checkout submodules?'
    required: true
    default: '1'
  commit_id:
    description: 'Commit to check out'
    required: false
    default: ''
  force:
    description: 'Force checkout even if directory exists and is non-empty'
    required: false
    default: '0'
  working-directory:
    description: 'Working Directory'
    required: true
    default: './'
outputs:
  cmake_definitions:
    description: "CMake definitions output"
    value: ${{ steps.clone.outputs.cmakeDefLocal }}
  include_directory:
    description: 'The include directory for this library'
    value: ${{ steps.clone.outputs.include-directory }}
  commit_id:
    description: 'Commit id of the cloned repository'
    value: ${{ steps.clone.outputs.commit-id }}
runs:
  using: "composite"
  steps: 
    - uses: Silverlan/common_actions/print_msg@main
      with:
        message: "=== Action Start: get_submodule ===\nrepo: ${{inputs.repo}}\nrepo_name: ${{inputs.repo_name}}\ndir: ${{inputs.dir}}\nclone_dir: ${{inputs.clone_dir}}\nshould_build: ${{inputs.should_build}}\nbuild_type: ${{inputs.build_type}}\nbuild_generator: ${{inputs.build_generator}}\ninclude_dir: ${{inputs.include_dir}}\ncmake_definitions: ${{inputs.cmake_definitions}}\ncmake_var: ${{inputs.cmake_var}}\ncmake_var_alias: ${{inputs.cmake_var_alias}}\ncheckout_submodules: ${{inputs.checkout_submodules}}\ncommit_id: ${{inputs.commit_id}}\nforce: ${{inputs.force}}\nworking-directory: ${{inputs.working-directory}}\n"

    - name: Initialize Env
      id: init-env
      uses: Silverlan/common_actions/set_common_env_vars@main
      with:
        working-directory: ${{inputs.working-directory}}
      
    - name: Clone
      shell: bash
      id: clone
      working-directory: ${{inputs.working-directory}}
      run: |
        rootDir=$PWD
        if [[ "${{ inputs.clone_dir }}" != "" ]]; then
          clone_dir=${{ inputs.clone_dir }}
        else
          clone_dir=${{ inputs.repo_name }}
        fi
        
        repo=${{ inputs.repo }}
        # Add "https://github.com/" prefix if repo doesn't start with "http"
        case $repo in http*) :; ;; (*) repo='https://github.com/'$repo; ;; esac
        
        # Only get submodule if directly doesn't exist or is empty
        if [[ ! -d "${{ inputs.dir }}/$clone_dir" || -z "$(ls -A ${{ inputs.dir }}/$clone_dir)" ]]; then
          mkdir -p ${{ inputs.dir }}
          cd ${{ inputs.dir }}
          
          echo "Git clone..."
          git clone $repo --single-branch --branch ${{ inputs.repo_branch }} $clone_dir
          echo "Done!"
          
          cd $clone_dir
          echo "Git checkout..."
          git checkout ${{ inputs.repo_branch }}
          echo "Done!"
          
          if [[ "${{ inputs.commit_id }}" != "" ]]; then
            git reset --hard "${{ inputs.commit_id }}"
          fi
          
          if [[ "${{ inputs.checkout_submodules }}" == "1" ]]; then
            echo "Git submodule..."
            git submodule update --init --recursive
            echo "Done!"
          fi
        elif [[ "${{ inputs.force }}" == "1" ]]; then
          cd ${{ inputs.dir }}
          # See https://stackoverflow.com/a/18999726/2482983
          git init
          git remote add origin $repo
          git fetch
          git reset origin/${{ inputs.repo_branch }}
          git branch --set-upstream-to=origin/${{ inputs.repo_branch }}
          git ls-files -z --deleted | xargs -0 git checkout --
          # TODO: Commit id, recursive, etc.
        fi

        commitId=$(git rev-parse --short=10 HEAD);
        echo "::set-output name=commit-id::$commitId"
        
        echo "Updating outputs and definitions..."
        fullIncludePath="$rootDir/${{ inputs.dir }}/$clone_dir/${{ inputs.include_dir }}"
        
        nfullIncludePath="$fullIncludePath"
        # Replace "./" with ""
        nfullIncludePath="${nfullIncludePath//.\//}"
        # Replace "//" with "/"
        nfullIncludePath="${nfullIncludePath//\/\//\/}"
        
        echo "::set-output name=include-directory::$nfullIncludePath"
        if [[ "${{ inputs.cmake_var }}" != "" ]]; then
          newCmakeDef=" -D${{ inputs.cmake_var }}=$nfullIncludePath"
          if [[ "${{ inputs.cmake_var_alias }}" != "" ]]; then
            newCmakeDef="$newCmakeDef -D${{ inputs.cmake_var_alias }}=$nfullIncludePath"
          fi
        else
          newCmakeDef=""
        fi
        echo ::set-output name=cmakeDefLocal::$(echo $newCmakeDef)
        echo "Done!"

    - name: Define CMake Variable
      uses: Silverlan/common_actions/define_cmake_var@main
      with:
        cmake_var: '${{ steps.clone.outputs.cmakeDefLocal }}'
        
    - uses: Silverlan/common_actions/print_msg@main
      with:
        message: "=== Action End: get_submodule ==="
