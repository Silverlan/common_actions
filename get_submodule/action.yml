name: 'Get Submodule'
description: 'Downloads and builds a git submodule'
inputs:
  repo:
    description: 'Repository Url'
    required: true
  repo_name:
    description: 'Name of the repository'
    required: true
  repo_branch:
    description: 'Branch to clone'
    required: true
    default: 'master'
  dir:
    description: 'Clone directory'
    required: true
    default: 'external_libs'
  should_build:
    description: 'Should build?'
    required: true
    default: true
  build_type:
    description: 'Build Type'
    required: true
  build_generator:
    description: 'Build Generator'
    required: true
  include_dir:
    description: 'Name of the include directory'
    required: true
    default: 'include'
  cmake_definitions:
    description: 'CMake definitions'
    required: true
    default: ''
  cmake_var:
    description: 'Name of the CMake variable to set to the include path'
    required: true
    default: ''
  cmake_var_alias:
    description: 'Alias CMake variable name'
    required: true
    default: ''
  root_dir:
    description: 'Root directory'
    required: true
    default: ''
outputs:
  cmake_definitions:
    description: "CMake definitions output"
    value: ${{ steps.clone.outputs.cmake_definitions }}
runs:
  using: "composite"
  steps: 
    - name: Initialize Env
      id: init-env
      uses: Silverlan/common_actions/set_common_env_vars@actions
      
    - name: Clone
      shell: bash
      id: clone
      run: |
        if [[ "${{ inputs.root_dir }}" != "" ]]; then
          root_dir=${{ inputs.root_dir }}
        else
          root_dir=${{ env.GA_ROOT_DIR }}
        fi
        cd $root_dir
        
        if [[ ! -d "${{ inputs.dir }}/${{ inputs.repo_name }}" ]]; then
          mkdir -p ${{ inputs.dir }}
          cd ${{ inputs.dir }}
          git clone ${{ inputs.repo }} --single-branch --branch ${{ inputs.repo_branch }}
          cd ${{ inputs.repo_name }}
          git checkout ${{ inputs.repo_branch }}
          git submodule update --init --recursive
        fi
        if [[ "${{ inputs.cmake_var }}" != "" ]]; then
          newCmakeDef=" -D${{ inputs.cmake_var }}=${{ env.GA_ROOT_DIR }}/${{ inputs.dir }}/${{ inputs.repo_name }}/${{ inputs.include_dir }}"
          if [[ "${{ inputs.cmake_var_alias }}" != "" ]]; then
            newCmakeDef="$newCmakeDef -D${{ inputs.cmake_var_alias }}=${{ env.GA_ROOT_DIR }}/${{ inputs.dir }}/${{ inputs.repo_name }}/${{ inputs.include_dir }}"
          fi
        else
          newCmakeDef=""
        fi
        echo ::set-output name=cmakeDefLocal::$(echo $newCmakeDef)

    - name: Define CMake Variable
      uses: Silverlan/common_actions/define_cmake_var@actions
      with:
        cmake_var: '${{ steps.clone.outputs.cmakeDefLocal }}'
        
