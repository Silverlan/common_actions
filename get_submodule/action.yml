name: 'Get Submodule'
description: 'Downloads and builds a git submodule'
inputs:
  repo:
    description: 'Repository Url'
    required: true
  repo_name:
    description: 'Name of the repository'
    required: true
  repo_branch:
    description: 'Branch to clone'
    required: true
    default: 'master'
  dir:
    description: 'Clone directory'
    required: true
    default: 'external_libs'
  should_build:
    description: 'Should build?'
    required: true
    default: true
  build_type:
    description: 'Build Type'
    required: true
  build_generator:
    description: 'Build Generator'
    required: true
  include_dir:
    description: 'Name of the include directory'
    required: true
    default: 'include'
  cmake_definitions:
    description: 'CMake definitions'
    required: true
    default: ''
  cmake_var:
    description: 'Name of the CMake variable to set to the include path'
    required: true
    default: ''
outputs:
  cmake_definitions:
    description: "CMake definitions output"
    value: ${{ steps.clone.outputs.cmake_definitions }}
runs:
  using: "composite"
  steps: 
    - name: Clone
      shell: bash
      id: clone
      run: |
        mkdir -p ${{ inputs.dir }}
        cd ${{ inputs.dir }}
        git clone ${{ inputs.repo }} --single-branch --branch ${{ inputs.repo_branch }}
        cd ${{ inputs.repo_name }}
        git checkout ${{ inputs.repo_branch }}
        if [[ "${{ inputs.cmake_var }}" != "" ]]; then
          $tmpDef="${{ inputs.cmake_definitions }} -D${{ inputs.cmake_var }}=${{ env.GA_ROOT_DIR }}/${{ inputs.dir }}/${{ inputs.repo_name }}/${{ inputs.include_dir }}"
          #echo "Adding CMake definition: -D${{ inputs.cmake_var }}=${{ env.GA_ROOT_DIR }}/${{ inputs.dir }}/${{ inputs.repo_name }}/${{ inputs.include_dir }}"
          #echo "cmake_definitions=${{ inputs.cmake_definitions }} -D${{ inputs.cmake_var }}=${{ env.GA_ROOT_DIR }}/${{ inputs.dir }}/${{ inputs.repo_name }}/${{ inputs.include_dir }}" >> $GITHUB_ENV
        else
          $tmpDef="${{ inputs.cmake_definitions }}"
          #echo "cmake_definitions=${{ inputs.cmake_definitions }}" >> $GITHUB_ENV
        fi
        echo "cmake_definitions=$tmpDef" >> $GITHUB_ENV
        echo "::set-output name=cmake_definitions::$(echo $tmpDef)"
    #- name: Build
    #  shell: bash
    #  run: |
    #    if [[ "${{inputs.should_build}}" == "true" ]]; then
    #      cmake -S . -B . ${{ inputs.cmake_definitions }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G "${{ inputs.build_generator }}"
    #      cmake --build ./ --config ${{ matrix.config.build_type }}
    #      cd ../
    #    fi
