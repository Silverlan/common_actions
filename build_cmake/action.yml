name: 'Generic CMake build'
description: 'Builds the specified project'
inputs:
  build_type:
    description: 'Build Type'
    required: true
    default: '${{ matrix.config.build_type }}'
  build_generator:
    description: 'Build Generator'
    required: true
    default: '${{ matrix.config.generators }}'
  build_target:
    description: 'Main target to build'
    required: true
  build_target_windows:
    description: 'Main target to build'
    required: true
    default: ''
  build_target_linux:
    description: 'Main target to build'
    required: true
    default: ''
  lib_name:
    description: 'Name of the library'
    required: true
    default: ''
  lib_name_windows:
    description: 'Name of the library'
    required: true
    default: ''
  lib_name_linux:
    description: 'Name of the library'
    required: true
    default: ''
  build_dir:
    description: 'The directory to write the build files to'
    required: true
    default: '${{ matrix.config.build_dir }}'
  cmake_script_location:
    description: 'The location of the CMake script'
    required: true
    default: ''
  is_cmake_script_location_absolute:
    description: 'Is cmake_script_location an absolute path?'
    required: true
    default: '0'
  cmake_definitions:
    description: 'CMake definitions'
    required: true
    default: ''
  cmake_definitions_tmp:
    description: 'Temporary CMake definitions'
    required: true
    default: ''
  cmake_var:
    description: 'Name of the CMake variable to set to the library path'
    required: true
    default: ''
  cmake_var_alias:
    description: 'Alias CMake variable name'
    required: true
    default: ''
  configure:
    description: 'Enable configuration'
    required: true
    default: '1'
  build:
    description: 'Enable build'
    required: true
    default: '1'
  root_dir:
    description: 'Root directory'
    required: true
    default: ''
  pre_build_cmd:
    description: 'Command(s) to run before building'
    required: true
    default: ''
  static_library:
    description: 'Is this a static library?'
    required: true
    default: '0'
outputs:
  library_file_path:
    description: 'The path (including filename and extension) of the generated library'
    value: ${{ steps.build.outputs.library-file-path }}
  binary_file_path:
    description: 'The path (including filename and extension) of the generated binary'
    value: ${{ steps.build.outputs.binary-file-path }}
runs:
  using: "composite"
  steps: 
    - name: Initialize Env
      id: init-env
      uses: Silverlan/common_actions/set_common_env_vars@main
      
    - name: Get CMake Vars
      id: cmake_vars
      uses: Silverlan/common_actions/get_cmake_vars@main
  
    - name: Build
      id: build
      shell: bash
      env:
        CC:   gcc-11
        CXX:  g++-11
      run: |
        if [[ "${{ inputs.root_dir }}" != "" ]]; then
          root_dir=${{ inputs.root_dir }}
        else
          root_dir=${{ env.GA_ROOT_DIR }}
        fi
        
        build_target=${{ inputs.build_target }}
        if [[ "${{ inputs.build_target_linux }}" != "" && "$RUNNER_OS" == "Linux" ]]; then
          build_target=${{ inputs.build_target_linux }}
        fi
        if [[ "${{ inputs.build_target_windows }}" != "" && "$RUNNER_OS" == "Windows" ]]; then
          build_target=${{ inputs.build_target_windows }}
        fi
        
        baseLibName=${{ inputs.lib_name }}
        if [[ "${{ inputs.lib_name_linux }}" != "" && "$RUNNER_OS" == "Linux" ]]; then
          baseLibName=${{ inputs.lib_name_linux }}
        fi
        if [[ "${{ inputs.lib_name_windows }}" != "" && "$RUNNER_OS" == "Windows" ]]; then
          baseLibName=${{ inputs.lib_name_windows }}
        fi
        
        if [[ "$baseLibName" != "" ]]; then
          libName="$baseLibName"
        else
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            libName="${{ inputs.build_type }}/lib$build_target"
          else
            libName="${{ inputs.build_type }}/$build_target"
          fi
        fi
        
        if [[ "${{ inputs.cmake_script_location }}" != "" ]]; then
          cmakeScriptLocation="${{ inputs.cmake_script_location }}"
        else
          cmakeScriptLocation="."
        fi
        
        libPath="$root_dir/${{ inputs.build_dir }}"
        libNameWithExt="$libName"
        binNameWithExt="$libName"
        if [[ "${{ inputs.static_library }}" == "1" && "$RUNNER_OS" == "Linux" ]]; then
          libNameWithExt="$libNameWithExt${{ env.GA_STATIC_LINK_LIBRARY_EXT }}"
          binNameWithExt="$binNameWithExt${{ env.GA_SHARED_BINARY_LIBRARY_EXT }}"
        else
          libNameWithExt="$libNameWithExt${{ env.GA_SHARED_LINK_LIBRARY_EXT }}"
          binNameWithExt="$binNameWithExt${{ env.GA_SHARED_BINARY_LIBRARY_EXT }}"
        fi
        libFilePath="$libPath/$libNameWithExt"
        binFilePath="$libPath/$binNameWithExt"

        echo "::set-output name=library-file-path::${libFilePath//.\//}"
        echo "::set-output name=binary-file-path::${binFilePath//.\//}"
        
        if [ -f "$libFilePath" ]; then
          echo "Library $libFilePath already exists! Skipping build..."
          ${{ inputs.pre_build_cmd }}
        else
          echo "Library $libFilePath not found! Rebuilding..."
          mkdir -p $root_dir/${{ inputs.build_dir }}
          cd $root_dir/${{ inputs.build_dir }}
          
          echo "Current directory: $PWD"
          echo "Set variables:"
          echo "  root_dir: $root_dir"
          echo "  cmake_script_location: ${{ inputs.cmake_script_location }}"
          echo "  cmakeScriptLocation: $cmakeScriptLocation"
          echo "  libName: $libName"
          echo "  libNameWithExt: $libNameWithExt"
          echo "  libPath: $libPath"
          echo "  libFilePath: $libFilePath"
          echo "  build_dir: ${{ inputs.build_dir }}"
          echo "  build_type: ${{ inputs.build_type }}"
          echo "  build_target: $build_target"
          echo "  input lib_name: $baseLibName"
          if [[ "${{ inputs.configure }}" == "1" ]]; then
            if [[ "${{ inputs.is_cmake_script_location_absolute }}" == "1" ]]; then
              cms=$cmakeScriptLocation
            else
              cms=$root_dir/$cmakeScriptLocation
            fi
            echo "CMake configure..."
            cmake $cms ${{ steps.cmake_vars.outputs.cmake_vars }} ${{ inputs.cmake_definitions_tmp }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -G "${{ inputs.build_generator }}"
            echo "Done!"
          fi
          echo "Running pre-build commands..."
          ${{ inputs.pre_build_cmd }}
          echo "Done!"
          
          echo "Build files in $PWD:"
          ls -R
          
          if [[ "${{ inputs.build }}" == "1" ]]; then
            echo "CMake build..."
            cmake --build ./ --verbose --config ${{ inputs.build_type }} --target $build_target
            echo "Done!"
          fi
          
          # We may have to copy the binary file on Linux systems
          baseName=$(basename $libFilePath)
          dirName=$(dirname $libFilePath)
          echo "Creating dir $dirName..."
          echo "Copying ./$baseName to $libFilePath..."
          mkdir -p "$dirName"
          cp "./$baseName" "$libFilePath" || true
          echo "Done!"
        fi
        
        echo "Setting definitions..."
        if [[ "${{ inputs.cmake_var }}" != "" ]]; then
          newCmakeDef=" -D${{ inputs.cmake_var }}=$libFilePath"
          if [[ "${{ inputs.cmake_var_alias }}" != "" ]]; then
            newCmakeDef="$newCmakeDef -D${{ inputs.cmake_var_alias }}=$libFilePath"
          fi
        else
          newCmakeDef=""
        fi
        echo ::set-output name=cmakeDefLocal::$(echo $newCmakeDef)
        echo "Done!"

    - name: Define CMake Variable
      uses: Silverlan/common_actions/define_cmake_var@main
      with:
        cmake_var: '${{ steps.build.outputs.cmakeDefLocal }}'
        
