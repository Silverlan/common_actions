name: 'Build Submodule'
description: 'Downloads and builds a git submodule'
inputs:
  repo:
    description: 'Repository Url'
    required: true
  repo_name:
    description: 'Name of the repository'
    required: true
  repo_branch:
    description: 'Branch to clone'
    required: true
    default: 'master'
  build_target:
    description: 'Main target to build'
    required: true
  build_target_windows:
    description: 'Main target to build'
    required: true
    default: ''
  build_target_linux:
    description: 'Main target to build'
    required: true
    default: ''
  lib_name:
    description: 'Name of the library'
    required: true
    default: ''
  lib_name_windows:
    description: 'Name of the library'
    required: true
    default: ''
  lib_name_linux:
    description: 'Name of the library'
    required: true
    default: ''
  build_dir:
    description: 'The directory to write the build files to'
    required: true
    default: 'build'
  build_type:
    description: 'Build Type'
    required: true
    default: ''
  root_dir:
    description: 'Root directory'
    required: true
    default: ''
  top_level_dir:
    description: 'The directory in which the submodule should reside in'
    required: true
    default: 'third_party_libs'
  cmake_definitions:
    description: 'CMake definitions'
    required: true
    default: ''
  cmake_definitions_tmp:
    description: 'Temporary CMake definitions'
    required: true
    default: ''
  cmake_var:
    description: 'Name of the CMake variable to set to the include path'
    required: true
    default: ''
  cmake_var_alias:
    description: 'Alias CMake variable name'
    required: true
    default: ''
  cmake_var_lib:
    description: 'Name of the CMake variable to set to the library path'
    required: true
    default: ''
  cmake_var_lib_alias:
    description: 'Alias CMake library variable name'
    required: true
    default: ''
  cmake_script_location:
    description: 'The location of the CMake script'
    required: true
    default: ''
  is_cmake_script_location_absolute:
    description: 'Is cmake_script_location an absolute path?'
    required: true
    default: '0'
  include_dir:
    description: 'Name of the include directory'
    required: true
    default: 'include'
  pre_build_cmd:
    description: 'Command(s) to run before building'
    required: true
    default: ''
  static_library:
    description: 'Is this a static library?'
    required: true
    default: '0'
  build:
    description: 'Enable build'
    required: true
    default: '1'
  commit_id:
    description: 'Commit to check out'
    required: false
    default: ''
  working-directory:
    description: 'Working Directory'
    required: true
    default: '.'
outputs:
  include_directory:
    description: 'The include directory for this library'
    value: ${{ steps.clone.outputs.include_directory }}
  library_file_path:
    description: 'The path (including filename and extension) of the generated library'
    value: ${{ steps.build.outputs.library_file_path }}
  binary_file_path:
    description: 'The path (including filename and extension) of the generated binary'
    value: ${{ steps.build.outputs.binary-file-path }}
runs:
  using: "composite"
  steps: 
    - uses: Silverlan/common_actions/action_start@main
      with:
        name: "build_submodule"
        input_values: "working-directory: repo: ${{inputs.repo}},repo_name: ${{inputs.repo_name}},repo_branch: ${{inputs.repo_branch}},build_target: ${{inputs.build_target}},build_target_windows: ${{inputs.build_target_windows}},build_target_linux: ${{inputs.build_target_linux}},lib_name: ${{inputs.lib_name}},lib_name_windows: ${{inputs.lib_name_windows}},lib_name_linux: ${{inputs.lib_name_linux}},build_dir: ${{inputs.build_dir}},build_type: ${{inputs.build_type}},root_dir: ${{inputs.root_dir}},top_level_dir: ${{inputs.top_level_dir}},cmake_definitions: ${{inputs.cmake_definitions}},cmake_definitions_tmp: ${{inputs.cmake_definitions_tmp}},cmake_var: ${{inputs.cmake_var}},cmake_var_alias: ${{inputs.cmake_var_alias}},cmake_var_lib: ${{inputs.cmake_var_lib}},cmake_var_lib_alias: ${{inputs.cmake_var_lib_alias}},cmake_script_location: ${{inputs.cmake_script_location}},is_cmake_script_location_absolute: ${{inputs.is_cmake_script_location_absolute}},include_dir: ${{inputs.include_dir}},pre_build_cmd: ${{inputs.pre_build_cmd}},static_library: ${{inputs.static_library}},build: ${{inputs.build}},commit_id: ${{inputs.commit_id}},working-directory: ${{inputs.working-directory}}"

    - name: Clone
      id: clone
      uses: Silverlan/common_actions/get_submodule@main
      with:
        dir: '${{ inputs.top_level_dir }}'
        repo: ${{ inputs.repo }}
        repo_name: ${{ inputs.repo_name }}
        repo_branch: ${{ inputs.repo_branch }}
        cmake_definitions: ${{ inputs.cmake_definitions }}
        cmake_var: ${{ inputs.cmake_var }}
        cmake_var_alias: ${{ inputs.cmake_var_alias }}
        include_dir: ${{ inputs.include_dir }}
        root_dir: ${{ inputs.root_dir }}
        commit_id: ${{ inputs.commit_id }}
        working-directory: ${{inputs.working-directory}}

    - name: Env
      shell: bash
      id: determine-build-type
      working-directory: ${{inputs.working-directory}}
      run: |
        if [[ "${{ inputs.build_type }}" != "" ]]; then
          echo "::set-output name=build_type::$(echo ${{ inputs.build_type }})"
        else
          echo "::set-output name=build_type::$(echo ${{ matrix.config.build_type }})"
        fi
        if [[ "${{ inputs.cmake_script_location }}" != "" ]]; then
          echo "::set-output name=cmake_script_location::$(echo ${{ inputs.cmake_script_location }})"
        else
          echo "::set-output name=cmake_script_location::$(echo ${{ inputs.top_level_dir }}/${{ inputs.repo_name }})"
        fi

    - name: Build
      uses: Silverlan/common_actions/build_cmake@main
      id: build
      with:
        build_type: ${{ steps.determine-build-type.outputs.build_type }}
        build_generator: ${{ matrix.config.generators }}
        build_target: ${{ inputs.build_target }}
        build_target_windows: ${{ inputs.build_target_windows }}
        build_target_linux: ${{ inputs.build_target_linux }}
        lib_name: ${{ inputs.lib_name }}
        lib_name_windows: ${{ inputs.lib_name_windows }}
        lib_name_linux: ${{ inputs.lib_name_linux }}
        build_dir: '${{ inputs.build_dir }}/${{ inputs.root_dir }}/${{ inputs.top_level_dir }}/${{ inputs.repo_name }}'
        cmake_definitions: ${{ steps.clone.outputs.cmake_definitions }}
        cmake_definitions_tmp: ${{ inputs.cmake_definitions_tmp }}
        cmake_var: ${{ inputs.cmake_var_lib }}
        cmake_var_alias: ${{ inputs.cmake_var_lib_alias }}
        cmake_script_location: ${{ steps.determine-build-type.outputs.cmake_script_location }}
        is_cmake_script_location_absolute: ${{ inputs.is_cmake_script_location_absolute }}
        root_dir: ${{ inputs.root_dir }}
        pre_build_cmd: ${{ inputs.pre_build_cmd }}
        static_library: ${{ inputs.static_library }}
        build: ${{ inputs.build }}
        cache_id: ${{ steps.clone.outputs.commit_id }}
        working-directory: ${{inputs.working-directory}}
        
    - uses: Silverlan/common_actions/action_end@main
